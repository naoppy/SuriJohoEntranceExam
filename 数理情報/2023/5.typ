#import "../../template.typ": mytemplate, overview, warning, opt_problem, diag
#show: doc => mytemplate(2023, 5, "Riku Yaegashi", "プログラミング", "normal", doc)

#overview[
  競プロ感強い問題です. 筆者は競プロ強くないので, 難しかったですが, 競プロで一回見たことある, なんて人には比較的取り組みやすい問題かもしれません.
  にしても(5)は難しい
]
== (1)
疎な3値表現 $(d_0,d_1,dots,d_n)$ で表現可能な自然数の最大 $L_n$ を求める.まず, $d_n$ を1にするのが最適である. なぜなら, $d_n$ を $0$ としてその他の桁を条件を満たすようにすべて $1$ にしたとしても値は高々 $2^n - 1$ であり, $d_n$ を1とする方が大きい値を取れる. この考察を帰納的に行うと  $d_n$ から1桁ずつ $1,0$ を繰り替えす表示が最適である.

$n$ が偶数であれば,
$
  2^n + 2^(n - 2) + dots + 2^0 = (4^(n/2+1) - 1 ) / (4 - 1)
$
$n$ が奇数であれば, 
$
  2^n + 2^(n-2) + dots + 2^1 = 2 (4^((n+1)/2) - 1) / (4 - 1)
$
== (2)
存在することは(3)から示せる. 存在するなら一意であることを示す. 2通りの表現ができるとする.下の桁から照合して $2^i$ の桁で初めて一致しないとする.

$d_i,d_i^prime={1,-1}$ で一致しない場合を考える.この時二つの疎な3値表現に対する生まれる差は $2^(i+1)$ である. 一方この時,両方とも $0$ でないので, 疎である条件から次の桁がともに0となっている. よって, $d_(i+1)$ 以降を変更したとしてもその変更は必ず, $2^(i+2)$ 以上となるので, 両者が一致することは無い.

そのほかで一致しない場合は差が $2^i$ であり, 次の桁以降をどのように変更しても一致させることができないことがわかる.
== (3)
2進表現を疎な三値表現に変換する $O(log d)$ 時間アルゴリズムを設計せよ.

実際に計算してみて $10$ くらいまで見ると $11$ を $10-1$ に変更するとよさそうなことがわかる.

下の桁から見ていって, $11$ が現れたら次の桁に $1$ を足して $11$ を $0-1$ と書き換える.このアルゴリズムは $11$ 続いた時点でそれを書き換え, 書き換えた後, 後ろの桁の $-1$ のひとつ前の桁は必ず $0$ であるので, 疎な3値表現の条件を満たしている.

これが $O(log d)$ であるためにはもう少し工夫が必要.桁上がりのタイミングで最悪の場合 $O(log d)$ の書き換え時間が必要.最悪の場合 $O(log d * log d)$ かかる可能性がある.

解決策1:均し時間で解析する.最悪の計算時間(つまり現在の桁より上がすべて1のとき)はそこまで頻繁に起こらないと考られる.(詳しくはアルゴリズムイントロダクション第二巻を参照されたい.)

解決策2:アルゴリズムを改善する.

下の桁から見ていって, $011dots 11$ を発見したら $100dots 0-1$ と書き換えるというアルゴリズムでも同じ動作をする.

これならば繰り上がりが生じる心配なく $O(log d)$ で計算が実行できる.
== (4)
三値表現が非零成分の個数を最小にする表現方法であること.

任意の三値表現を取ってきて, それを非零成分を増やすことなく, 疎な三値表現に変更できれば, 問題を示したことになる.

(3)と同じく, 下の桁から書き換えていくことを考える.

まず, $1,-1,-1dots,-1$ がでたら $0,0,dots,1$ と書き換える. $-1,1,1,dots,1$ が現れたら $0,,0,dots,-1$ と書き換える.

$0,-1,-1,dots,-1$ がでたら $-1,0,0,dots,0,1$ と書き換える. $0,1,1,dots,1,1$ が出たら $1,0,0,dots,0,-1$ と書き換える.いずれも非零成分は増加していない.

よって, 任意の三値表現を取ってきたときに, 同じ数字を表す, 非零成分が増えない疎な三値表現を構成できるので,疎な三値表現は非零成分の個数を最小化する最適な表現である.
== (5)
自然数 $n$ に対して, $L_n$ 以下の自然数からランダムサンプリングし非零成分の期待値を $n$ で割った値が $n->infinity$ で $1/3$ に収束することを示す.

まず, 疎な三値表現は一意性が保証されているので, $n+1$ 桁目から樹形図チックに疎である条件と最高位が $1$ であることを満たしながら, すべてを列挙していくことを考える.

最高位は必ず $1$ であるのは自然数からサンプリングしていることの帰結である.

まず,  $X_n$ にどれくらい自然数があるかを考える.これは $1<=z<=L_n$ である.

$0,1,-1$ を樹形図のように疎である条件を満たしながら, 書き並べていくことを考える.
#image("5_1.jpg")

この樹形図に $0<=z<=L_n$ を満たす任意の $z$ に対して対応する疎な三値表現がただ一回現れる.(三値表現の一意性による.)よって, 自然数をランダムサンプリングし, 対応する疎な三値表現に変換し非零成分の個数を期待値をとる行為は, この樹形図から一つの枝を選び出し, その非零成分の個数の期待値を取ることに対応する.

数え上げのため変数を導入する. 

最高位が第 $i$ 桁で $1$ であり, $i-1$ 桁以降で枝分かれしたすべての枝について非零要素の個数を足したものを $T_i$ とする.

このとき,求めたいものは, $ sum_(i=1)^(n+1) T_i $ である.

漸化式を立てる.

第 $i$ 桁が $1$ のとき,次の桁は必ず $0$ である.その次の桁で $1,0,-1$ に分岐する.この時最初の $1$ が何回出てくるか考えると, $i$ 桁目が $1$ の要素の数に等しく $L_(i-1) - L_(i-2) =(2^n +(-1)^(n+1)) / (3) = S_i $

$1$ に分岐したとき, これ以降の個数は $T_(i-2)$ で記憶されている.

$-1$ に分岐したときも, 実はこれは $T_(i-2)$ に等しい.なぜなら, $i-2$ 桁目が $1$ から始まる枝に対して,最初の $1$ を $-1$ に書き換えればよいだけである.

$0$ に分岐したとき $i-3$ 桁目の場合分けに移る.



これをまとめると
$
  T_(i) = S_i + sum_(j = 1)^(i-2) 2T_(j)
$
和の漸化式の鉄則に従って差分をとる.
$
  T_i - T_(i - 1) = 2T_(i - 2) +S_i - S_(i - 1) \
  T_i - T_(i - 1) - 2T_(i-2) = S_i - S_(i-1) = (2^(i - 1) - 2 (-1)^i) / (3)
$
この漸化式の特性方程式の根は $2,-1 $より,一般解
$
  T_i = alpha 2^i + beta (-1)^i
$
微分方程式の類推で, 非斉次問題に対する解を
$
  (alpha i + beta)2^i + (gamma i + delta)(-1)^i
$
と仮定する.
元の式に代入して係数間の関係を調べると
$
  3alpha 2^(i-1) +3 gamma (-1)^i = (2^(i - 1) - 2 (-1)^i) / (3) \
  alpha = 1/9, gamma = -2/9
$
初期条件 $i=1$ で $1$ , $i=2$ で $1$ である.初期条件を代入すると
$
  beta = 5/27, delta = -5/27 $$ T_i = ((3i+5)2^i + (-6i - 5)(-1)^i ) /(27)
$
実際検算してみる.

$i=3$ のとき, ${101, 10-1, 100}$ であり,非零要素数は $5$

$i=4$ のとき, ${1010,10-10,1001, 100-1, 1000}$ であり, 非零要素は $9$

$i=5$ のとき,樹形図を書けば, ${10101,10100,1010-1,10010,10001,10000,1000-1,100-10,10-101,10-100,10-1001}$ であり非零要素は $25$ 個

これらはいずれも $T_i$ に代入した値に等しい.

ここまでのまとめ

樹形図を書き, 各枝と $1<=z<=L_n$ の自然数の疎な三値表現が等価であることからすべての枝について辿ったとき, 非零をどれくらい通るかカウントしたい.

最高位が $i$ 桁であるときに, それ以下のすべての枝を見て非零成分の個数は $T_i$

次に求めたいのは
$
  sum_(i=1)^(n+1) T_i
$
これが求まれば, あとは $L_n$ で割って $n->infinity$ とすればよい.
求めるために公式を準備する
$
  sum_(i=1)^(n+1) x^i = (x(1-x^(n+1))) / (1-x)
$
微分して
$
  sum_(i=1)^(n+1)i x^(i-1) = ((1-x)(1-(n+2)x^(n+1))+x(1-x^(n+1))) / (1-x)^2 = (1-(n+2)x^(n+1)+(n+1)x^(n+2)) / (1-x)^2
$
これに$x$をかけると
$
  sum_(i=1)^(n+1)i x^i = (1-(n+2)x^(n+1)+(n+1)x^(n+2)) / (1-x)^2 x
$
よって
$
  sum_(i=1)^(n+1) T_i = 1/9( (1-(n+2)2^(n+1)+(n+1)2^(n+2))/(1)2)+10/27 (2^(n+1)-1) /(2-1) \
  -2/9((1-(n+2)(-1)^(n+1)+(n+1)(-1)^(n+2))/(4)) + 5/27 (1-(-1)^(n+1)) / (2)
$
$L_n = O(4dot 2^n/3)$ なので, あとで $1/n$ して極限を取ることを考えると結局考えておけばいいのは第一項の $n$ に依存する項だけ.
$
  (1/9n dot 2^(n+2)) / (4 2^n/3)->1/3
$
よって所望の結果を得る.